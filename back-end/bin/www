#!/usr/bin/env node

/**
 * Module dependencies.
 */
require("dotenv").config();
const app = require("../app");
const debug = require("debug")("back-end:server");
const http = require("http");
const mongoose = require("mongoose");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "1500");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

const io = require("socket.io")(server, {
  transports: ["websocket", "polling"],
  cors: {
    origin: `http://localhost:4000`, // Allow requests from this origin
    methods: ["GET", "POST"], // Specify the allowed HTTP methods
  },
});

// Socket.io event handling
io.on("connection", (socket) => {
  console.log("socket A user connected");

  // Example: Handle vote event
  socket.on("vote", (data) => {
    console.log("socket Vote received:");
    // Handle vote logic and emit events as needed
    // For example, you can emit a "newVote" event to all connected clients
    io.emit("newVote", data);
  });

  socket.on("poll-created", (data) => {
    console.log("socket Vote received:");
    // Handle vote logic and emit events as needed
    // For example, you can emit a "newVote" event to all connected clients
    io.emit("newPoll", data);
  });

  socket.on("disconnect", () => {
    console.log("A user disconnected");
  });
});

mongoose.connect(process.env.DB);

mongoose.connection.on("connected", () => {
  console.log("Connected to MongoDB");
});

mongoose.connection.on("error", (err) => {
  console.error("Failed to connect to MongoDB", err);
});

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
