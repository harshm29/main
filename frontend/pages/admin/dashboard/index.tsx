import React, { useEffect, useState } from "react";
import Head from "next/head";
import style from "../dashboard/dashboard.module.scss";
import { MyPage } from "../../../src/components/common/types";
import { useGetNomineesChart } from "../../../src/hooks/vote/useVote";
import { Chart } from "chart.js/auto";
import io from "socket.io-client";
import { socketurl } from "../../../src/services";
const socket = io(socketurl);
const Dashboard: MyPage = () => {
  const [chartData, setChartData] = useState(null);
  const [Total, setTotal] = useState(null);
  const [loading, setLoading] = useState(true);
  const chartRef = React.createRef();
  const { GetNomineesChart }: any = useGetNomineesChart();

  const getData = () => {
    setLoading(true);
    GetNomineesChart().then((res: any) => {
      console.log(res);
      if (res.status) {
        setChartData(res.data);
        setTotal(res.total_votes);
      } else {
        setChartData(null);
        setTotal(null);
      }
      setLoading(false);
    });
  };

  useEffect(() => {
    getData();
  }, []);
  useEffect(() => {
    if (chartData) {
      const ctx = chartRef.current.getContext("2d");
      new Chart(ctx, {
        type: "bar",
        data: chartData,
        options: {
          plugins: {
            title: {
              display: true,
              text: `Total Votes: ${Total}`, // Add the total votes label here
              font: {
                size: 16,
                weight: "bold",
              },
              padding: {
                top: 10,
                bottom: 20,
              },
            },
          },
          indexAxis: "y",
        },
      });
    }
  }, [chartData]);
  useEffect(() => {
    socket.on("newVote", (data: any) => {
      getData();
    });
    return () => {
      socket.disconnect();
    };
  }, []);
  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="main_wrapper">
        <div className={`dashboard_main_content ${style.dashboard}`}>
          <h2 className="main_page_title">Dashboard</h2>
          <div className="row">
            <div className="col-md-12">
              <div className={style.statistics}>
                <div className="row">
                  {loading ? (
                    <p>Loading chart data...</p>
                  ) : chartData ? (
                    <div className="chart-container" style={{ width: "100%" }}>
                      <canvas ref={chartRef}></canvas>
                    </div>
                  ) : (
                    <p>No chart data available</p>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
};

export default Dashboard;
Dashboard.Layout = "admin";
